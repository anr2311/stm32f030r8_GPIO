
stm32f030xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000043c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004fc  08000504  00010504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004fc  080004fc  00010504  2**0
                  CONTENTS
  4 .ARM          00000000  080004fc  080004fc  00010504  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004fc  08000504  00010504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004fc  080004fc  000104fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000500  08000500  00010500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000504  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000504  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010504  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001052c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000077b  00000000  00000000  0001056f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001dc  00000000  00000000  00010cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  00010ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000084  00000000  00000000  00010f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000149d  00000000  00000000  00010ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c82  00000000  00000000  00012499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004cbb  00000000  00000000  0001311b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000001ac  00000000  00000000  00017dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00017f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080004e4 	.word	0x080004e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080004e4 	.word	0x080004e4

08000108 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b084      	sub	sp, #16
 800010c:	af00      	add	r7, sp, #0
    GPIO_Handle_t GpioLed;

    GpioLed.pGPIOx = GPIOA;
 800010e:	003b      	movs	r3, r7
 8000110:	2290      	movs	r2, #144	; 0x90
 8000112:	05d2      	lsls	r2, r2, #23
 8000114:	601a      	str	r2, [r3, #0]

    GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN5;
 8000116:	003b      	movs	r3, r7
 8000118:	2205      	movs	r2, #5
 800011a:	711a      	strb	r2, [r3, #4]

    GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 800011c:	003b      	movs	r3, r7
 800011e:	2201      	movs	r2, #1
 8000120:	715a      	strb	r2, [r3, #5]

    GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HI_SPEED;
 8000122:	003b      	movs	r3, r7
 8000124:	2203      	movs	r2, #3
 8000126:	719a      	strb	r2, [r3, #6]

    GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NOPUPD;
 8000128:	003b      	movs	r3, r7
 800012a:	2200      	movs	r2, #0
 800012c:	71da      	strb	r2, [r3, #7]

    GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_PUSH_PULL;
 800012e:	003b      	movs	r3, r7
 8000130:	2200      	movs	r2, #0
 8000132:	721a      	strb	r2, [r3, #8]

    // Enable Clock Control
    GPIO_PClockControl (GPIOA, ENABLE);
 8000134:	2390      	movs	r3, #144	; 0x90
 8000136:	05db      	lsls	r3, r3, #23
 8000138:	2101      	movs	r1, #1
 800013a:	0018      	movs	r0, r3
 800013c:	f000 f8d6 	bl	80002ec <GPIO_PClockControl>

    // GPIO initialization
    GPIO_Init (&GpioLed);
 8000140:	003b      	movs	r3, r7
 8000142:	0018      	movs	r0, r3
 8000144:	f000 f843 	bl	80001ce <GPIO_Init>

    GPIO_WriteToOutputPin (GPIOA, GPIO_PIN5, GPIO_PIN_RESET);
 8000148:	2390      	movs	r3, #144	; 0x90
 800014a:	05db      	lsls	r3, r3, #23
 800014c:	2200      	movs	r2, #0
 800014e:	2105      	movs	r1, #5
 8000150:	0018      	movs	r0, r3
 8000152:	f000 f963 	bl	800041c <GPIO_WriteToOutputPin>

    while (1)
    {
    	GPIO_ToggleOutputPin (GPIOA, GPIO_PIN5);
 8000156:	2390      	movs	r3, #144	; 0x90
 8000158:	05db      	lsls	r3, r3, #23
 800015a:	2105      	movs	r1, #5
 800015c:	0018      	movs	r0, r3
 800015e:	f000 f987 	bl	8000470 <GPIO_ToggleOutputPin>

    	for (int i = 0; i <= 5000000; i++); /* Software Delay of approx ~7 seconds */
 8000162:	2300      	movs	r3, #0
 8000164:	60fb      	str	r3, [r7, #12]
 8000166:	e002      	b.n	800016e <main+0x66>
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	3301      	adds	r3, #1
 800016c:	60fb      	str	r3, [r7, #12]
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	4a01      	ldr	r2, [pc, #4]	; (8000178 <main+0x70>)
 8000172:	4293      	cmp	r3, r2
 8000174:	ddf8      	ble.n	8000168 <main+0x60>
    	GPIO_ToggleOutputPin (GPIOA, GPIO_PIN5);
 8000176:	e7ee      	b.n	8000156 <main+0x4e>
 8000178:	004c4b40 	.word	0x004c4b40

0800017c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800017c:	480d      	ldr	r0, [pc, #52]	; (80001b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800017e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000180:	e000      	b.n	8000184 <Reset_Handler+0x8>
 8000182:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000184:	480c      	ldr	r0, [pc, #48]	; (80001b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000186:	490d      	ldr	r1, [pc, #52]	; (80001bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000188:	4a0d      	ldr	r2, [pc, #52]	; (80001c0 <LoopForever+0xe>)
  movs r3, #0
 800018a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800018c:	e002      	b.n	8000194 <LoopCopyDataInit>

0800018e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800018e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000192:	3304      	adds	r3, #4

08000194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000198:	d3f9      	bcc.n	800018e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800019a:	4a0a      	ldr	r2, [pc, #40]	; (80001c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800019c:	4c0a      	ldr	r4, [pc, #40]	; (80001c8 <LoopForever+0x16>)
  movs r3, #0
 800019e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001a0:	e001      	b.n	80001a6 <LoopFillZerobss>

080001a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001a4:	3204      	adds	r2, #4

080001a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001a8:	d3fb      	bcc.n	80001a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001aa:	f000 f977 	bl	800049c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001ae:	f7ff ffab 	bl	8000108 <main>

080001b2 <LoopForever>:

LoopForever:
  b LoopForever
 80001b2:	e7fe      	b.n	80001b2 <LoopForever>
  ldr   r0, =_estack
 80001b4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80001b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001c0:	08000504 	.word	0x08000504
  ldr r2, =_sbss
 80001c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001c8:	2000001c 	.word	0x2000001c

080001cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001cc:	e7fe      	b.n	80001cc <ADC_IRQHandler>

080001ce <GPIO_Init>:
 * Input Parameters  : Configuration parameters for a GPIO port
 * Return Parameters : None
 * Note / Remarks	 : None
 ********************************************************************/
void GPIO_Init (GPIO_Handle_t *pGPIOHandle)
{
 80001ce:	b590      	push	{r4, r7, lr}
 80001d0:	b085      	sub	sp, #20
 80001d2:	af00      	add	r7, sp, #0
 80001d4:	6078      	str	r0, [r7, #4]
	uint32_t TempReg = 0u;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]

	// Configure the mode of the GPIO pin
	if (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) /* Non-interrupt modes */
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	795b      	ldrb	r3, [r3, #5]
 80001de:	2b03      	cmp	r3, #3
 80001e0:	d812      	bhi.n	8000208 <GPIO_Init+0x3a>
	{
		TempReg = pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	795b      	ldrb	r3, [r3, #5]
 80001e6:	001a      	movs	r2, r3
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	791b      	ldrb	r3, [r3, #4]
 80001ec:	005b      	lsls	r3, r3, #1
 80001ee:	409a      	lsls	r2, r3
 80001f0:	0013      	movs	r3, r2
 80001f2:	60fb      	str	r3, [r7, #12]

		pGPIOHandle -> pGPIOx->MODER |= TempReg;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	6819      	ldr	r1, [r3, #0]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	68fa      	ldr	r2, [r7, #12]
 8000200:	430a      	orrs	r2, r1
 8000202:	601a      	str	r2, [r3, #0]

		// Clear TempReg
		TempReg = 0u;
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
	}

	// Configure the speed of the GPIO pin
	TempReg = pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	799b      	ldrb	r3, [r3, #6]
 800020c:	001a      	movs	r2, r3
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	791b      	ldrb	r3, [r3, #4]
 8000212:	005b      	lsls	r3, r3, #1
 8000214:	409a      	lsls	r2, r3
 8000216:	0013      	movs	r3, r2
 8000218:	60fb      	str	r3, [r7, #12]

	pGPIOHandle -> pGPIOx->OSPEEDR |= TempReg;
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	6899      	ldr	r1, [r3, #8]
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	68fa      	ldr	r2, [r7, #12]
 8000226:	430a      	orrs	r2, r1
 8000228:	609a      	str	r2, [r3, #8]

	TempReg = 0u;
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]

	// Configure the PUPD settings
	TempReg = pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	79db      	ldrb	r3, [r3, #7]
 8000232:	001a      	movs	r2, r3
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	791b      	ldrb	r3, [r3, #4]
 8000238:	005b      	lsls	r3, r3, #1
 800023a:	409a      	lsls	r2, r3
 800023c:	0013      	movs	r3, r2
 800023e:	60fb      	str	r3, [r7, #12]

	pGPIOHandle -> pGPIOx->PUPDR |= TempReg;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	68d9      	ldr	r1, [r3, #12]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	68fa      	ldr	r2, [r7, #12]
 800024c:	430a      	orrs	r2, r1
 800024e:	60da      	str	r2, [r3, #12]

	TempReg = 0u;
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]

	// Configure the output type
	TempReg = pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	7a1b      	ldrb	r3, [r3, #8]
 8000258:	001a      	movs	r2, r3
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	791b      	ldrb	r3, [r3, #4]
 800025e:	409a      	lsls	r2, r3
 8000260:	0013      	movs	r3, r2
 8000262:	60fb      	str	r3, [r7, #12]

	pGPIOHandle -> pGPIOx->OTYPER |= TempReg;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	6859      	ldr	r1, [r3, #4]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	68fa      	ldr	r2, [r7, #12]
 8000270:	430a      	orrs	r2, r1
 8000272:	605a      	str	r2, [r3, #4]

	TempReg = 0u;
 8000274:	2300      	movs	r3, #0
 8000276:	60fb      	str	r3, [r7, #12]

	// Configure the alternate functionality (if required)
	if (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	795b      	ldrb	r3, [r3, #5]
 800027c:	2b02      	cmp	r3, #2
 800027e:	d131      	bne.n	80002e4 <GPIO_Init+0x116>
	{
		uint8_t temp1 = 0u, temp2 = 0u;
 8000280:	200b      	movs	r0, #11
 8000282:	183b      	adds	r3, r7, r0
 8000284:	2200      	movs	r2, #0
 8000286:	701a      	strb	r2, [r3, #0]
 8000288:	210a      	movs	r1, #10
 800028a:	187b      	adds	r3, r7, r1
 800028c:	2200      	movs	r2, #0
 800028e:	701a      	strb	r2, [r3, #0]

		temp1 = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber) / 8;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	791a      	ldrb	r2, [r3, #4]
 8000294:	183b      	adds	r3, r7, r0
 8000296:	08d2      	lsrs	r2, r2, #3
 8000298:	701a      	strb	r2, [r3, #0]
		temp2 = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber) % 8;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	791a      	ldrb	r2, [r3, #4]
 800029e:	000c      	movs	r4, r1
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2107      	movs	r1, #7
 80002a4:	400a      	ands	r2, r1
 80002a6:	701a      	strb	r2, [r3, #0]

		TempReg = pGPIOHandle -> GPIO_PinConfig.GPIO_PinAltFuncMode << (4u * temp2);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	7a5b      	ldrb	r3, [r3, #9]
 80002ac:	001a      	movs	r2, r3
 80002ae:	193b      	adds	r3, r7, r4
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	409a      	lsls	r2, r3
 80002b6:	0013      	movs	r3, r2
 80002b8:	60fb      	str	r3, [r7, #12]

		if (temp1 == 0)
 80002ba:	183b      	adds	r3, r7, r0
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d108      	bne.n	80002d4 <GPIO_Init+0x106>
		{
			pGPIOHandle ->pGPIOx->AFRL |= TempReg;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	6a19      	ldr	r1, [r3, #32]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	68fa      	ldr	r2, [r7, #12]
 80002ce:	430a      	orrs	r2, r1
 80002d0:	621a      	str	r2, [r3, #32]
		else
		{
			pGPIOHandle ->pGPIOx->AFRH |= TempReg;
		}
	}
}
 80002d2:	e007      	b.n	80002e4 <GPIO_Init+0x116>
			pGPIOHandle ->pGPIOx->AFRH |= TempReg;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	68fa      	ldr	r2, [r7, #12]
 80002e0:	430a      	orrs	r2, r1
 80002e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80002e4:	46c0      	nop			; (mov r8, r8)
 80002e6:	46bd      	mov	sp, r7
 80002e8:	b005      	add	sp, #20
 80002ea:	bd90      	pop	{r4, r7, pc}

080002ec <GPIO_PClockControl>:
 * Input Parameters  : Base address of the GPIO peripheral; ENABLE / DISABLE
 * Return Parameters : None
 * Note / Remarks	 : None
 ********************************************************************/
void GPIO_PClockControl (GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	000a      	movs	r2, r1
 80002f6:	1cfb      	adds	r3, r7, #3
 80002f8:	701a      	strb	r2, [r3, #0]
	if (EnOrDi == ENABLE)
 80002fa:	1cfb      	adds	r3, r7, #3
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d13c      	bne.n	800037c <GPIO_PClockControl+0x90>
	{
		if 		(pGPIOx == GPIOA) GPIOA_PCLK_EN();
 8000302:	687a      	ldr	r2, [r7, #4]
 8000304:	2390      	movs	r3, #144	; 0x90
 8000306:	05db      	lsls	r3, r3, #23
 8000308:	429a      	cmp	r2, r3
 800030a:	d107      	bne.n	800031c <GPIO_PClockControl+0x30>
 800030c:	4b39      	ldr	r3, [pc, #228]	; (80003f4 <GPIO_PClockControl+0x108>)
 800030e:	695a      	ldr	r2, [r3, #20]
 8000310:	4b38      	ldr	r3, [pc, #224]	; (80003f4 <GPIO_PClockControl+0x108>)
 8000312:	2180      	movs	r1, #128	; 0x80
 8000314:	0289      	lsls	r1, r1, #10
 8000316:	430a      	orrs	r2, r1
 8000318:	615a      	str	r2, [r3, #20]
		else if (pGPIOx == GPIOB) GPIOB_PCLK_DI();
		else if (pGPIOx == GPIOC) GPIOC_PCLK_DI();
		else if (pGPIOx == GPIOD) GPIOD_PCLK_DI();
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
	}
}
 800031a:	e066      	b.n	80003ea <GPIO_PClockControl+0xfe>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_EN();
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a36      	ldr	r2, [pc, #216]	; (80003f8 <GPIO_PClockControl+0x10c>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d107      	bne.n	8000334 <GPIO_PClockControl+0x48>
 8000324:	4b33      	ldr	r3, [pc, #204]	; (80003f4 <GPIO_PClockControl+0x108>)
 8000326:	695a      	ldr	r2, [r3, #20]
 8000328:	4b32      	ldr	r3, [pc, #200]	; (80003f4 <GPIO_PClockControl+0x108>)
 800032a:	2180      	movs	r1, #128	; 0x80
 800032c:	02c9      	lsls	r1, r1, #11
 800032e:	430a      	orrs	r2, r1
 8000330:	615a      	str	r2, [r3, #20]
}
 8000332:	e05a      	b.n	80003ea <GPIO_PClockControl+0xfe>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_EN();
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a31      	ldr	r2, [pc, #196]	; (80003fc <GPIO_PClockControl+0x110>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d107      	bne.n	800034c <GPIO_PClockControl+0x60>
 800033c:	4b2d      	ldr	r3, [pc, #180]	; (80003f4 <GPIO_PClockControl+0x108>)
 800033e:	695a      	ldr	r2, [r3, #20]
 8000340:	4b2c      	ldr	r3, [pc, #176]	; (80003f4 <GPIO_PClockControl+0x108>)
 8000342:	2180      	movs	r1, #128	; 0x80
 8000344:	0309      	lsls	r1, r1, #12
 8000346:	430a      	orrs	r2, r1
 8000348:	615a      	str	r2, [r3, #20]
}
 800034a:	e04e      	b.n	80003ea <GPIO_PClockControl+0xfe>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_EN();
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a2c      	ldr	r2, [pc, #176]	; (8000400 <GPIO_PClockControl+0x114>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d107      	bne.n	8000364 <GPIO_PClockControl+0x78>
 8000354:	4b27      	ldr	r3, [pc, #156]	; (80003f4 <GPIO_PClockControl+0x108>)
 8000356:	695a      	ldr	r2, [r3, #20]
 8000358:	4b26      	ldr	r3, [pc, #152]	; (80003f4 <GPIO_PClockControl+0x108>)
 800035a:	2180      	movs	r1, #128	; 0x80
 800035c:	0349      	lsls	r1, r1, #13
 800035e:	430a      	orrs	r2, r1
 8000360:	615a      	str	r2, [r3, #20]
}
 8000362:	e042      	b.n	80003ea <GPIO_PClockControl+0xfe>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_EN();
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a27      	ldr	r2, [pc, #156]	; (8000404 <GPIO_PClockControl+0x118>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d13e      	bne.n	80003ea <GPIO_PClockControl+0xfe>
 800036c:	4b21      	ldr	r3, [pc, #132]	; (80003f4 <GPIO_PClockControl+0x108>)
 800036e:	695a      	ldr	r2, [r3, #20]
 8000370:	4b20      	ldr	r3, [pc, #128]	; (80003f4 <GPIO_PClockControl+0x108>)
 8000372:	2180      	movs	r1, #128	; 0x80
 8000374:	03c9      	lsls	r1, r1, #15
 8000376:	430a      	orrs	r2, r1
 8000378:	615a      	str	r2, [r3, #20]
}
 800037a:	e036      	b.n	80003ea <GPIO_PClockControl+0xfe>
		if 		(pGPIOx == GPIOA) GPIOA_PCLK_DI();
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	2390      	movs	r3, #144	; 0x90
 8000380:	05db      	lsls	r3, r3, #23
 8000382:	429a      	cmp	r2, r3
 8000384:	d106      	bne.n	8000394 <GPIO_PClockControl+0xa8>
 8000386:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <GPIO_PClockControl+0x108>)
 8000388:	695a      	ldr	r2, [r3, #20]
 800038a:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <GPIO_PClockControl+0x108>)
 800038c:	491e      	ldr	r1, [pc, #120]	; (8000408 <GPIO_PClockControl+0x11c>)
 800038e:	400a      	ands	r2, r1
 8000390:	615a      	str	r2, [r3, #20]
}
 8000392:	e02a      	b.n	80003ea <GPIO_PClockControl+0xfe>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_DI();
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a18      	ldr	r2, [pc, #96]	; (80003f8 <GPIO_PClockControl+0x10c>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <GPIO_PClockControl+0xbe>
 800039c:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <GPIO_PClockControl+0x108>)
 800039e:	695a      	ldr	r2, [r3, #20]
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <GPIO_PClockControl+0x108>)
 80003a2:	491a      	ldr	r1, [pc, #104]	; (800040c <GPIO_PClockControl+0x120>)
 80003a4:	400a      	ands	r2, r1
 80003a6:	615a      	str	r2, [r3, #20]
}
 80003a8:	e01f      	b.n	80003ea <GPIO_PClockControl+0xfe>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_DI();
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a13      	ldr	r2, [pc, #76]	; (80003fc <GPIO_PClockControl+0x110>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_PClockControl+0xd4>
 80003b2:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <GPIO_PClockControl+0x108>)
 80003b4:	695a      	ldr	r2, [r3, #20]
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <GPIO_PClockControl+0x108>)
 80003b8:	4915      	ldr	r1, [pc, #84]	; (8000410 <GPIO_PClockControl+0x124>)
 80003ba:	400a      	ands	r2, r1
 80003bc:	615a      	str	r2, [r3, #20]
}
 80003be:	e014      	b.n	80003ea <GPIO_PClockControl+0xfe>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_DI();
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a0f      	ldr	r2, [pc, #60]	; (8000400 <GPIO_PClockControl+0x114>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PClockControl+0xea>
 80003c8:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <GPIO_PClockControl+0x108>)
 80003ca:	695a      	ldr	r2, [r3, #20]
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <GPIO_PClockControl+0x108>)
 80003ce:	4911      	ldr	r1, [pc, #68]	; (8000414 <GPIO_PClockControl+0x128>)
 80003d0:	400a      	ands	r2, r1
 80003d2:	615a      	str	r2, [r3, #20]
}
 80003d4:	e009      	b.n	80003ea <GPIO_PClockControl+0xfe>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a0a      	ldr	r2, [pc, #40]	; (8000404 <GPIO_PClockControl+0x118>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d105      	bne.n	80003ea <GPIO_PClockControl+0xfe>
 80003de:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <GPIO_PClockControl+0x108>)
 80003e0:	695a      	ldr	r2, [r3, #20]
 80003e2:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <GPIO_PClockControl+0x108>)
 80003e4:	490c      	ldr	r1, [pc, #48]	; (8000418 <GPIO_PClockControl+0x12c>)
 80003e6:	400a      	ands	r2, r1
 80003e8:	615a      	str	r2, [r3, #20]
}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	b002      	add	sp, #8
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	40021000 	.word	0x40021000
 80003f8:	48000400 	.word	0x48000400
 80003fc:	48000800 	.word	0x48000800
 8000400:	48000c00 	.word	0x48000c00
 8000404:	48001400 	.word	0x48001400
 8000408:	fffdffff 	.word	0xfffdffff
 800040c:	fffbffff 	.word	0xfffbffff
 8000410:	fff7ffff 	.word	0xfff7ffff
 8000414:	ffefffff 	.word	0xffefffff
 8000418:	ffbfffff 	.word	0xffbfffff

0800041c <GPIO_WriteToOutputPin>:
 * Input Parameters  : Base address of the GPIO peripheral; pin number of the GPIO port; Value to be written
 * Return Parameters : None
 * Note / Remarks	 : None
 ********************************************************************/
void GPIO_WriteToOutputPin (GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	0008      	movs	r0, r1
 8000426:	0011      	movs	r1, r2
 8000428:	1cfb      	adds	r3, r7, #3
 800042a:	1c02      	adds	r2, r0, #0
 800042c:	701a      	strb	r2, [r3, #0]
 800042e:	1cbb      	adds	r3, r7, #2
 8000430:	1c0a      	adds	r2, r1, #0
 8000432:	701a      	strb	r2, [r3, #0]
	if (Value == GPIO_PIN_SET)
 8000434:	1cbb      	adds	r3, r7, #2
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d10a      	bne.n	8000452 <GPIO_WriteToOutputPin+0x36>
	{
		pGPIOx ->ODR |= (1u << PinNumber);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	695a      	ldr	r2, [r3, #20]
 8000440:	1cfb      	adds	r3, r7, #3
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2101      	movs	r1, #1
 8000446:	4099      	lsls	r1, r3
 8000448:	000b      	movs	r3, r1
 800044a:	431a      	orrs	r2, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	615a      	str	r2, [r3, #20]
	}
	else
	{
		pGPIOx ->ODR &= ~(1u << PinNumber);
	}
}
 8000450:	e00a      	b.n	8000468 <GPIO_WriteToOutputPin+0x4c>
		pGPIOx ->ODR &= ~(1u << PinNumber);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	1cfa      	adds	r2, r7, #3
 8000458:	7812      	ldrb	r2, [r2, #0]
 800045a:	2101      	movs	r1, #1
 800045c:	4091      	lsls	r1, r2
 800045e:	000a      	movs	r2, r1
 8000460:	43d2      	mvns	r2, r2
 8000462:	401a      	ands	r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	615a      	str	r2, [r3, #20]
}
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	b002      	add	sp, #8
 800046e:	bd80      	pop	{r7, pc}

08000470 <GPIO_ToggleOutputPin>:
 * Input Parameters  : Base address of the peripheral; Pin number of the pin to be toggled
 * Return Parameters : None
 * Note / Remarks	 : None
 ********************************************************************/
void GPIO_ToggleOutputPin (GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	000a      	movs	r2, r1
 800047a:	1cfb      	adds	r3, r7, #3
 800047c:	701a      	strb	r2, [r3, #0]
	pGPIOx->ODR = pGPIOx->ODR ^ (1u << PinNumber);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	695a      	ldr	r2, [r3, #20]
 8000482:	1cfb      	adds	r3, r7, #3
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2101      	movs	r1, #1
 8000488:	4099      	lsls	r1, r3
 800048a:	000b      	movs	r3, r1
 800048c:	405a      	eors	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	615a      	str	r2, [r3, #20]
}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	b002      	add	sp, #8
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <__libc_init_array>:
 800049c:	b570      	push	{r4, r5, r6, lr}
 800049e:	2600      	movs	r6, #0
 80004a0:	4c0c      	ldr	r4, [pc, #48]	; (80004d4 <__libc_init_array+0x38>)
 80004a2:	4d0d      	ldr	r5, [pc, #52]	; (80004d8 <__libc_init_array+0x3c>)
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	10a4      	asrs	r4, r4, #2
 80004a8:	42a6      	cmp	r6, r4
 80004aa:	d109      	bne.n	80004c0 <__libc_init_array+0x24>
 80004ac:	2600      	movs	r6, #0
 80004ae:	f000 f819 	bl	80004e4 <_init>
 80004b2:	4c0a      	ldr	r4, [pc, #40]	; (80004dc <__libc_init_array+0x40>)
 80004b4:	4d0a      	ldr	r5, [pc, #40]	; (80004e0 <__libc_init_array+0x44>)
 80004b6:	1b64      	subs	r4, r4, r5
 80004b8:	10a4      	asrs	r4, r4, #2
 80004ba:	42a6      	cmp	r6, r4
 80004bc:	d105      	bne.n	80004ca <__libc_init_array+0x2e>
 80004be:	bd70      	pop	{r4, r5, r6, pc}
 80004c0:	00b3      	lsls	r3, r6, #2
 80004c2:	58eb      	ldr	r3, [r5, r3]
 80004c4:	4798      	blx	r3
 80004c6:	3601      	adds	r6, #1
 80004c8:	e7ee      	b.n	80004a8 <__libc_init_array+0xc>
 80004ca:	00b3      	lsls	r3, r6, #2
 80004cc:	58eb      	ldr	r3, [r5, r3]
 80004ce:	4798      	blx	r3
 80004d0:	3601      	adds	r6, #1
 80004d2:	e7f2      	b.n	80004ba <__libc_init_array+0x1e>
 80004d4:	080004fc 	.word	0x080004fc
 80004d8:	080004fc 	.word	0x080004fc
 80004dc:	08000500 	.word	0x08000500
 80004e0:	080004fc 	.word	0x080004fc

080004e4 <_init>:
 80004e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ea:	bc08      	pop	{r3}
 80004ec:	469e      	mov	lr, r3
 80004ee:	4770      	bx	lr

080004f0 <_fini>:
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f6:	bc08      	pop	{r3}
 80004f8:	469e      	mov	lr, r3
 80004fa:	4770      	bx	lr
