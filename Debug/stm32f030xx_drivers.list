
stm32f030xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008a4  080008ac  000108ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008a4  080008a4  000108ac  2**0
                  CONTENTS
  4 .ARM          00000000  080008a4  080008a4  000108ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008a4  080008ac  000108ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008a4  080008a4  000108a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008a8  080008a8  000108a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000108ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080008ac  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080008ac  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000108ac  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000108d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000008f6  00000000  00000000  00010917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000258  00000000  00000000  0001120d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00011468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008c  00000000  00000000  00011520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001fa8  00000000  00000000  000115ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000100d  00000000  00000000  00013554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000083df  00000000  00000000  00014561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000001e8  00000000  00000000  0001c940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0001cb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800088c 	.word	0x0800088c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800088c 	.word	0x0800088c

08000108 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000108:	b590      	push	{r4, r7, lr}
 800010a:	b087      	sub	sp, #28
 800010c:	af00      	add	r7, sp, #0
	/* The following is GPIO LED configuration */
    GPIO_Handle_t GpioLed;

    /* Clearing the local structure so as to not initialize garbage values to GPIO peripheral */
    memset(&GpioLed, 0u, sizeof(GpioLed));
 800010e:	240c      	movs	r4, #12
 8000110:	193b      	adds	r3, r7, r4
 8000112:	220c      	movs	r2, #12
 8000114:	2100      	movs	r1, #0
 8000116:	0018      	movs	r0, r3
 8000118:	f000 fb8c 	bl	8000834 <memset>

    GpioLed.pGPIOx = GPIOA;
 800011c:	193b      	adds	r3, r7, r4
 800011e:	2290      	movs	r2, #144	; 0x90
 8000120:	05d2      	lsls	r2, r2, #23
 8000122:	601a      	str	r2, [r3, #0]

    GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN5;
 8000124:	193b      	adds	r3, r7, r4
 8000126:	2205      	movs	r2, #5
 8000128:	711a      	strb	r2, [r3, #4]

    GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 800012a:	193b      	adds	r3, r7, r4
 800012c:	2201      	movs	r2, #1
 800012e:	715a      	strb	r2, [r3, #5]

    GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HI_SPEED;
 8000130:	193b      	adds	r3, r7, r4
 8000132:	2203      	movs	r2, #3
 8000134:	719a      	strb	r2, [r3, #6]

    GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NOPUPD;
 8000136:	193b      	adds	r3, r7, r4
 8000138:	2200      	movs	r2, #0
 800013a:	71da      	strb	r2, [r3, #7]

    GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_PUSH_PULL;
 800013c:	193b      	adds	r3, r7, r4
 800013e:	2200      	movs	r2, #0
 8000140:	721a      	strb	r2, [r3, #8]

    // Enable Clock Control
    GPIO_PClockControl (GPIOA, ENABLE);
 8000142:	2390      	movs	r3, #144	; 0x90
 8000144:	05db      	lsls	r3, r3, #23
 8000146:	2101      	movs	r1, #1
 8000148:	0018      	movs	r0, r3
 800014a:	f000 f9ad 	bl	80004a8 <GPIO_PClockControl>

    // GPIO initialization
    GPIO_Init (&GpioLed);
 800014e:	193b      	adds	r3, r7, r4
 8000150:	0018      	movs	r0, r3
 8000152:	f000 f865 	bl	8000220 <GPIO_Init>

    /* Writing a '0' to the LED GPIO pin initially */
    GPIO_WriteToOutputPin (GPIOA, GPIO_PIN5, GPIO_PIN_RESET);
 8000156:	2390      	movs	r3, #144	; 0x90
 8000158:	05db      	lsls	r3, r3, #23
 800015a:	2200      	movs	r2, #0
 800015c:	2105      	movs	r1, #5
 800015e:	0018      	movs	r0, r3
 8000160:	f000 fa3a 	bl	80005d8 <GPIO_WriteToOutputPin>

    /* Following is the GPIO button configuration */
    GPIO_Handle_t GpioButton;

    /* Clearing the local structure so as to not initialize garbage values to GPIO peripheral */
    memset(&GpioButton, 0u, sizeof(GpioButton));
 8000164:	003b      	movs	r3, r7
 8000166:	220c      	movs	r2, #12
 8000168:	2100      	movs	r1, #0
 800016a:	0018      	movs	r0, r3
 800016c:	f000 fb62 	bl	8000834 <memset>

    GpioButton.pGPIOx = GPIOC;
 8000170:	003b      	movs	r3, r7
 8000172:	4a0e      	ldr	r2, [pc, #56]	; (80001ac <main+0xa4>)
 8000174:	601a      	str	r2, [r3, #0]

    GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN13;
 8000176:	003b      	movs	r3, r7
 8000178:	220d      	movs	r2, #13
 800017a:	711a      	strb	r2, [r3, #4]

    GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800017c:	003b      	movs	r3, r7
 800017e:	2204      	movs	r2, #4
 8000180:	715a      	strb	r2, [r3, #5]

    GpioButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HI_SPEED;
 8000182:	003b      	movs	r3, r7
 8000184:	2203      	movs	r2, #3
 8000186:	719a      	strb	r2, [r3, #6]

    GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU_ONLY;
 8000188:	003b      	movs	r3, r7
 800018a:	2201      	movs	r2, #1
 800018c:	71da      	strb	r2, [r3, #7]

    // Enable Clock Control
    GPIO_PClockControl (GPIOC, ENABLE);
 800018e:	4b07      	ldr	r3, [pc, #28]	; (80001ac <main+0xa4>)
 8000190:	2101      	movs	r1, #1
 8000192:	0018      	movs	r0, r3
 8000194:	f000 f988 	bl	80004a8 <GPIO_PClockControl>

    // GPIO initialization
    GPIO_Init (&GpioButton);
 8000198:	003b      	movs	r3, r7
 800019a:	0018      	movs	r0, r3
 800019c:	f000 f840 	bl	8000220 <GPIO_Init>

    /* IRQ configurations - priority can be 0 - 3 */
    GPIO_IRQConfig(IRQ_NO_EXTI4_15, 3u, ENABLE);
 80001a0:	2201      	movs	r2, #1
 80001a2:	2103      	movs	r1, #3
 80001a4:	2007      	movs	r0, #7
 80001a6:	f000 fa57 	bl	8000658 <GPIO_IRQConfig>

    while(1);
 80001aa:	e7fe      	b.n	80001aa <main+0xa2>
 80001ac:	48000800 	.word	0x48000800

080001b0 <EXTI4_15_IRQHandler>:

    return 0;
}

void EXTI4_15_IRQHandler(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
	/* Clearing the interrupt bit */
	GPIO_IRQHandling(GPIO_PIN13);
 80001b4:	200d      	movs	r0, #13
 80001b6:	f000 fb1f 	bl	80007f8 <GPIO_IRQHandling>

	/* Toggling the on board GPIO on GPIOA5 */
	GPIO_ToggleOutputPin(GPIOA, GPIO_PIN5);
 80001ba:	2390      	movs	r3, #144	; 0x90
 80001bc:	05db      	lsls	r3, r3, #23
 80001be:	2105      	movs	r1, #5
 80001c0:	0018      	movs	r0, r3
 80001c2:	f000 fa33 	bl	800062c <GPIO_ToggleOutputPin>
}
 80001c6:	46c0      	nop			; (mov r8, r8)
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}

080001cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001cc:	480d      	ldr	r0, [pc, #52]	; (8000204 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001d0:	e000      	b.n	80001d4 <Reset_Handler+0x8>
 80001d2:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001d4:	480c      	ldr	r0, [pc, #48]	; (8000208 <LoopForever+0x6>)
  ldr r1, =_edata
 80001d6:	490d      	ldr	r1, [pc, #52]	; (800020c <LoopForever+0xa>)
  ldr r2, =_sidata
 80001d8:	4a0d      	ldr	r2, [pc, #52]	; (8000210 <LoopForever+0xe>)
  movs r3, #0
 80001da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001dc:	e002      	b.n	80001e4 <LoopCopyDataInit>

080001de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001e2:	3304      	adds	r3, #4

080001e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001e8:	d3f9      	bcc.n	80001de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001ea:	4a0a      	ldr	r2, [pc, #40]	; (8000214 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001ec:	4c0a      	ldr	r4, [pc, #40]	; (8000218 <LoopForever+0x16>)
  movs r3, #0
 80001ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001f0:	e001      	b.n	80001f6 <LoopFillZerobss>

080001f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001f4:	3204      	adds	r2, #4

080001f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001f8:	d3fb      	bcc.n	80001f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001fa:	f000 fb23 	bl	8000844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001fe:	f7ff ff83 	bl	8000108 <main>

08000202 <LoopForever>:

LoopForever:
  b LoopForever
 8000202:	e7fe      	b.n	8000202 <LoopForever>
  ldr   r0, =_estack
 8000204:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800020c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000210:	080008ac 	.word	0x080008ac
  ldr r2, =_sbss
 8000214:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000218:	2000001c 	.word	0x2000001c

0800021c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800021c:	e7fe      	b.n	800021c <ADC_IRQHandler>
	...

08000220 <GPIO_Init>:
 * Input Parameters  : Configuration parameters for a GPIO port
 * Return Parameters : None
 * Note / Remarks	 : None
 ********************************************************************/
void GPIO_Init (GPIO_Handle_t *pGPIOHandle)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b087      	sub	sp, #28
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	uint32_t TempReg = 0u;
 8000228:	2300      	movs	r3, #0
 800022a:	617b      	str	r3, [r7, #20]

	// Configure the mode of the GPIO pin
	if (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) /* Non-interrupt modes */
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	795b      	ldrb	r3, [r3, #5]
 8000230:	2b03      	cmp	r3, #3
 8000232:	d813      	bhi.n	800025c <GPIO_Init+0x3c>
	{
		TempReg = pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	795b      	ldrb	r3, [r3, #5]
 8000238:	001a      	movs	r2, r3
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	791b      	ldrb	r3, [r3, #4]
 800023e:	005b      	lsls	r3, r3, #1
 8000240:	409a      	lsls	r2, r3
 8000242:	0013      	movs	r3, r2
 8000244:	617b      	str	r3, [r7, #20]

		pGPIOHandle -> pGPIOx->MODER |= TempReg;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	6819      	ldr	r1, [r3, #0]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	697a      	ldr	r2, [r7, #20]
 8000252:	430a      	orrs	r2, r1
 8000254:	601a      	str	r2, [r3, #0]

		// Clear TempReg
		TempReg = 0u;
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]
 800025a:	e0a4      	b.n	80003a6 <GPIO_Init+0x186>
	}
	else
	{
		if (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	795b      	ldrb	r3, [r3, #5]
 8000260:	2b04      	cmp	r3, #4
 8000262:	d116      	bne.n	8000292 <GPIO_Init+0x72>
		{
			EXTI->EXTI_FTSR |= (1u << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000264:	4b89      	ldr	r3, [pc, #548]	; (800048c <GPIO_Init+0x26c>)
 8000266:	68d9      	ldr	r1, [r3, #12]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	791b      	ldrb	r3, [r3, #4]
 800026c:	001a      	movs	r2, r3
 800026e:	2301      	movs	r3, #1
 8000270:	4093      	lsls	r3, r2
 8000272:	001a      	movs	r2, r3
 8000274:	4b85      	ldr	r3, [pc, #532]	; (800048c <GPIO_Init+0x26c>)
 8000276:	430a      	orrs	r2, r1
 8000278:	60da      	str	r2, [r3, #12]
			// Clear the corresponding RTSR bit
			EXTI->EXTI_RTSR &= ~(1u << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800027a:	4b84      	ldr	r3, [pc, #528]	; (800048c <GPIO_Init+0x26c>)
 800027c:	689a      	ldr	r2, [r3, #8]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	791b      	ldrb	r3, [r3, #4]
 8000282:	0019      	movs	r1, r3
 8000284:	2301      	movs	r3, #1
 8000286:	408b      	lsls	r3, r1
 8000288:	43d9      	mvns	r1, r3
 800028a:	4b80      	ldr	r3, [pc, #512]	; (800048c <GPIO_Init+0x26c>)
 800028c:	400a      	ands	r2, r1
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	e034      	b.n	80002fc <GPIO_Init+0xdc>
		}
		else if (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	795b      	ldrb	r3, [r3, #5]
 8000296:	2b05      	cmp	r3, #5
 8000298:	d116      	bne.n	80002c8 <GPIO_Init+0xa8>
		{
			EXTI->EXTI_RTSR |= (1u << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800029a:	4b7c      	ldr	r3, [pc, #496]	; (800048c <GPIO_Init+0x26c>)
 800029c:	6899      	ldr	r1, [r3, #8]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	791b      	ldrb	r3, [r3, #4]
 80002a2:	001a      	movs	r2, r3
 80002a4:	2301      	movs	r3, #1
 80002a6:	4093      	lsls	r3, r2
 80002a8:	001a      	movs	r2, r3
 80002aa:	4b78      	ldr	r3, [pc, #480]	; (800048c <GPIO_Init+0x26c>)
 80002ac:	430a      	orrs	r2, r1
 80002ae:	609a      	str	r2, [r3, #8]
			// Clear the corresponding FTSR bit
			EXTI->EXTI_FTSR &= ~(1u << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80002b0:	4b76      	ldr	r3, [pc, #472]	; (800048c <GPIO_Init+0x26c>)
 80002b2:	68da      	ldr	r2, [r3, #12]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	791b      	ldrb	r3, [r3, #4]
 80002b8:	0019      	movs	r1, r3
 80002ba:	2301      	movs	r3, #1
 80002bc:	408b      	lsls	r3, r1
 80002be:	43d9      	mvns	r1, r3
 80002c0:	4b72      	ldr	r3, [pc, #456]	; (800048c <GPIO_Init+0x26c>)
 80002c2:	400a      	ands	r2, r1
 80002c4:	60da      	str	r2, [r3, #12]
 80002c6:	e019      	b.n	80002fc <GPIO_Init+0xdc>
		}
		else if (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	795b      	ldrb	r3, [r3, #5]
 80002cc:	2b06      	cmp	r3, #6
 80002ce:	d115      	bne.n	80002fc <GPIO_Init+0xdc>
		{
			EXTI->EXTI_FTSR |= (1u << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80002d0:	4b6e      	ldr	r3, [pc, #440]	; (800048c <GPIO_Init+0x26c>)
 80002d2:	68d9      	ldr	r1, [r3, #12]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	791b      	ldrb	r3, [r3, #4]
 80002d8:	001a      	movs	r2, r3
 80002da:	2301      	movs	r3, #1
 80002dc:	4093      	lsls	r3, r2
 80002de:	001a      	movs	r2, r3
 80002e0:	4b6a      	ldr	r3, [pc, #424]	; (800048c <GPIO_Init+0x26c>)
 80002e2:	430a      	orrs	r2, r1
 80002e4:	60da      	str	r2, [r3, #12]

			EXTI->EXTI_RTSR |= (1u << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80002e6:	4b69      	ldr	r3, [pc, #420]	; (800048c <GPIO_Init+0x26c>)
 80002e8:	6899      	ldr	r1, [r3, #8]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	791b      	ldrb	r3, [r3, #4]
 80002ee:	001a      	movs	r2, r3
 80002f0:	2301      	movs	r3, #1
 80002f2:	4093      	lsls	r3, r2
 80002f4:	001a      	movs	r2, r3
 80002f6:	4b65      	ldr	r3, [pc, #404]	; (800048c <GPIO_Init+0x26c>)
 80002f8:	430a      	orrs	r2, r1
 80002fa:	609a      	str	r2, [r3, #8]
		}

		// Configure the GPIO port selection in SYSCFG_EXTICR
		SYSCFG_PCLK_EN(); /* Enable PCLK for SYSCFG peripheral */
 80002fc:	4b64      	ldr	r3, [pc, #400]	; (8000490 <GPIO_Init+0x270>)
 80002fe:	699a      	ldr	r2, [r3, #24]
 8000300:	4b63      	ldr	r3, [pc, #396]	; (8000490 <GPIO_Init+0x270>)
 8000302:	2101      	movs	r1, #1
 8000304:	430a      	orrs	r2, r1
 8000306:	619a      	str	r2, [r3, #24]

		uint8_t temp1, temp2, portcode;

		temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 4;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	791a      	ldrb	r2, [r3, #4]
 800030c:	2313      	movs	r3, #19
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	0892      	lsrs	r2, r2, #2
 8000312:	701a      	strb	r2, [r3, #0]
		temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	791a      	ldrb	r2, [r3, #4]
 8000318:	2312      	movs	r3, #18
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	2103      	movs	r1, #3
 800031e:	400a      	ands	r2, r1
 8000320:	701a      	strb	r2, [r3, #0]
		portcode = GPIO_BASEADDR_TO_PR(pGPIOHandle->pGPIOx);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	2390      	movs	r3, #144	; 0x90
 8000328:	05db      	lsls	r3, r3, #23
 800032a:	429a      	cmp	r2, r3
 800032c:	d01d      	beq.n	800036a <GPIO_Init+0x14a>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a58      	ldr	r2, [pc, #352]	; (8000494 <GPIO_Init+0x274>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d016      	beq.n	8000366 <GPIO_Init+0x146>
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a56      	ldr	r2, [pc, #344]	; (8000498 <GPIO_Init+0x278>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d00f      	beq.n	8000362 <GPIO_Init+0x142>
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a55      	ldr	r2, [pc, #340]	; (800049c <GPIO_Init+0x27c>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d008      	beq.n	800035e <GPIO_Init+0x13e>
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a53      	ldr	r2, [pc, #332]	; (80004a0 <GPIO_Init+0x280>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d101      	bne.n	800035a <GPIO_Init+0x13a>
 8000356:	2305      	movs	r3, #5
 8000358:	e008      	b.n	800036c <GPIO_Init+0x14c>
 800035a:	2300      	movs	r3, #0
 800035c:	e006      	b.n	800036c <GPIO_Init+0x14c>
 800035e:	2303      	movs	r3, #3
 8000360:	e004      	b.n	800036c <GPIO_Init+0x14c>
 8000362:	2302      	movs	r3, #2
 8000364:	e002      	b.n	800036c <GPIO_Init+0x14c>
 8000366:	2301      	movs	r3, #1
 8000368:	e000      	b.n	800036c <GPIO_Init+0x14c>
 800036a:	2300      	movs	r3, #0
 800036c:	2111      	movs	r1, #17
 800036e:	187a      	adds	r2, r7, r1
 8000370:	7013      	strb	r3, [r2, #0]
		SYSCFG ->SYSCFG_EXTICR[temp1] = portcode << (4 * temp2);
 8000372:	187b      	adds	r3, r7, r1
 8000374:	781a      	ldrb	r2, [r3, #0]
 8000376:	2312      	movs	r3, #18
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	409a      	lsls	r2, r3
 8000380:	0011      	movs	r1, r2
 8000382:	4a48      	ldr	r2, [pc, #288]	; (80004a4 <GPIO_Init+0x284>)
 8000384:	2313      	movs	r3, #19
 8000386:	18fb      	adds	r3, r7, r3
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	3302      	adds	r3, #2
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	5099      	str	r1, [r3, r2]

		// Enable interrupt delivery in the Interrupt Mask Register
		EXTI->EXTI_IMR |= (1u << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000390:	4b3e      	ldr	r3, [pc, #248]	; (800048c <GPIO_Init+0x26c>)
 8000392:	6819      	ldr	r1, [r3, #0]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	791b      	ldrb	r3, [r3, #4]
 8000398:	001a      	movs	r2, r3
 800039a:	2301      	movs	r3, #1
 800039c:	4093      	lsls	r3, r2
 800039e:	001a      	movs	r2, r3
 80003a0:	4b3a      	ldr	r3, [pc, #232]	; (800048c <GPIO_Init+0x26c>)
 80003a2:	430a      	orrs	r2, r1
 80003a4:	601a      	str	r2, [r3, #0]
	}

	// Configure the speed of the GPIO pin
	TempReg = pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	799b      	ldrb	r3, [r3, #6]
 80003aa:	001a      	movs	r2, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	791b      	ldrb	r3, [r3, #4]
 80003b0:	005b      	lsls	r3, r3, #1
 80003b2:	409a      	lsls	r2, r3
 80003b4:	0013      	movs	r3, r2
 80003b6:	617b      	str	r3, [r7, #20]

	pGPIOHandle -> pGPIOx->OSPEEDR |= TempReg;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	6899      	ldr	r1, [r3, #8]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	697a      	ldr	r2, [r7, #20]
 80003c4:	430a      	orrs	r2, r1
 80003c6:	609a      	str	r2, [r3, #8]

	TempReg = 0u;
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]

	// Configure the PUPD settings
	TempReg = pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	79db      	ldrb	r3, [r3, #7]
 80003d0:	001a      	movs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	791b      	ldrb	r3, [r3, #4]
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	409a      	lsls	r2, r3
 80003da:	0013      	movs	r3, r2
 80003dc:	617b      	str	r3, [r7, #20]

	pGPIOHandle -> pGPIOx->PUPDR |= TempReg;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	68d9      	ldr	r1, [r3, #12]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	697a      	ldr	r2, [r7, #20]
 80003ea:	430a      	orrs	r2, r1
 80003ec:	60da      	str	r2, [r3, #12]

	TempReg = 0u;
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]

	// Configure the output type
	TempReg = pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	7a1b      	ldrb	r3, [r3, #8]
 80003f6:	001a      	movs	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	791b      	ldrb	r3, [r3, #4]
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0013      	movs	r3, r2
 8000400:	617b      	str	r3, [r7, #20]

	pGPIOHandle -> pGPIOx->OTYPER |= TempReg;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	6859      	ldr	r1, [r3, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	697a      	ldr	r2, [r7, #20]
 800040e:	430a      	orrs	r2, r1
 8000410:	605a      	str	r2, [r3, #4]

	TempReg = 0u;
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]

	// Configure the alternate functionality (if required)
	if (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	795b      	ldrb	r3, [r3, #5]
 800041a:	2b02      	cmp	r3, #2
 800041c:	d131      	bne.n	8000482 <GPIO_Init+0x262>
	{
		uint8_t temp1 = 0u, temp2 = 0u;
 800041e:	2010      	movs	r0, #16
 8000420:	183b      	adds	r3, r7, r0
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]
 8000426:	210f      	movs	r1, #15
 8000428:	187b      	adds	r3, r7, r1
 800042a:	2200      	movs	r2, #0
 800042c:	701a      	strb	r2, [r3, #0]

		temp1 = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber) / 8;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	791a      	ldrb	r2, [r3, #4]
 8000432:	183b      	adds	r3, r7, r0
 8000434:	08d2      	lsrs	r2, r2, #3
 8000436:	701a      	strb	r2, [r3, #0]
		temp2 = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber) % 8;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	791a      	ldrb	r2, [r3, #4]
 800043c:	000c      	movs	r4, r1
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2107      	movs	r1, #7
 8000442:	400a      	ands	r2, r1
 8000444:	701a      	strb	r2, [r3, #0]

		TempReg = pGPIOHandle -> GPIO_PinConfig.GPIO_PinAltFuncMode << (4u * temp2);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	7a5b      	ldrb	r3, [r3, #9]
 800044a:	001a      	movs	r2, r3
 800044c:	193b      	adds	r3, r7, r4
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	409a      	lsls	r2, r3
 8000454:	0013      	movs	r3, r2
 8000456:	617b      	str	r3, [r7, #20]

		if (temp1 == 0)
 8000458:	183b      	adds	r3, r7, r0
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d108      	bne.n	8000472 <GPIO_Init+0x252>
		{
			pGPIOHandle ->pGPIOx->AFRL |= TempReg;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	6a19      	ldr	r1, [r3, #32]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	697a      	ldr	r2, [r7, #20]
 800046c:	430a      	orrs	r2, r1
 800046e:	621a      	str	r2, [r3, #32]
		else
		{
			pGPIOHandle ->pGPIOx->AFRH |= TempReg;
		}
	}
}
 8000470:	e007      	b.n	8000482 <GPIO_Init+0x262>
			pGPIOHandle ->pGPIOx->AFRH |= TempReg;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	697a      	ldr	r2, [r7, #20]
 800047e:	430a      	orrs	r2, r1
 8000480:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	b007      	add	sp, #28
 8000488:	bd90      	pop	{r4, r7, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	40010400 	.word	0x40010400
 8000490:	40021000 	.word	0x40021000
 8000494:	48000400 	.word	0x48000400
 8000498:	48000800 	.word	0x48000800
 800049c:	48000c00 	.word	0x48000c00
 80004a0:	48001400 	.word	0x48001400
 80004a4:	40010000 	.word	0x40010000

080004a8 <GPIO_PClockControl>:
 * Input Parameters  : Base address of the GPIO peripheral; ENABLE / DISABLE
 * Return Parameters : None
 * Note / Remarks	 : None
 ********************************************************************/
void GPIO_PClockControl (GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	000a      	movs	r2, r1
 80004b2:	1cfb      	adds	r3, r7, #3
 80004b4:	701a      	strb	r2, [r3, #0]
	if (EnOrDi == ENABLE)
 80004b6:	1cfb      	adds	r3, r7, #3
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d13c      	bne.n	8000538 <GPIO_PClockControl+0x90>
	{
		if 		(pGPIOx == GPIOA) GPIOA_PCLK_EN();
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	2390      	movs	r3, #144	; 0x90
 80004c2:	05db      	lsls	r3, r3, #23
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d107      	bne.n	80004d8 <GPIO_PClockControl+0x30>
 80004c8:	4b39      	ldr	r3, [pc, #228]	; (80005b0 <GPIO_PClockControl+0x108>)
 80004ca:	695a      	ldr	r2, [r3, #20]
 80004cc:	4b38      	ldr	r3, [pc, #224]	; (80005b0 <GPIO_PClockControl+0x108>)
 80004ce:	2180      	movs	r1, #128	; 0x80
 80004d0:	0289      	lsls	r1, r1, #10
 80004d2:	430a      	orrs	r2, r1
 80004d4:	615a      	str	r2, [r3, #20]
		else if (pGPIOx == GPIOB) GPIOB_PCLK_DI();
		else if (pGPIOx == GPIOC) GPIOC_PCLK_DI();
		else if (pGPIOx == GPIOD) GPIOD_PCLK_DI();
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
	}
}
 80004d6:	e066      	b.n	80005a6 <GPIO_PClockControl+0xfe>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_EN();
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a36      	ldr	r2, [pc, #216]	; (80005b4 <GPIO_PClockControl+0x10c>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d107      	bne.n	80004f0 <GPIO_PClockControl+0x48>
 80004e0:	4b33      	ldr	r3, [pc, #204]	; (80005b0 <GPIO_PClockControl+0x108>)
 80004e2:	695a      	ldr	r2, [r3, #20]
 80004e4:	4b32      	ldr	r3, [pc, #200]	; (80005b0 <GPIO_PClockControl+0x108>)
 80004e6:	2180      	movs	r1, #128	; 0x80
 80004e8:	02c9      	lsls	r1, r1, #11
 80004ea:	430a      	orrs	r2, r1
 80004ec:	615a      	str	r2, [r3, #20]
}
 80004ee:	e05a      	b.n	80005a6 <GPIO_PClockControl+0xfe>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_EN();
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a31      	ldr	r2, [pc, #196]	; (80005b8 <GPIO_PClockControl+0x110>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d107      	bne.n	8000508 <GPIO_PClockControl+0x60>
 80004f8:	4b2d      	ldr	r3, [pc, #180]	; (80005b0 <GPIO_PClockControl+0x108>)
 80004fa:	695a      	ldr	r2, [r3, #20]
 80004fc:	4b2c      	ldr	r3, [pc, #176]	; (80005b0 <GPIO_PClockControl+0x108>)
 80004fe:	2180      	movs	r1, #128	; 0x80
 8000500:	0309      	lsls	r1, r1, #12
 8000502:	430a      	orrs	r2, r1
 8000504:	615a      	str	r2, [r3, #20]
}
 8000506:	e04e      	b.n	80005a6 <GPIO_PClockControl+0xfe>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_EN();
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a2c      	ldr	r2, [pc, #176]	; (80005bc <GPIO_PClockControl+0x114>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d107      	bne.n	8000520 <GPIO_PClockControl+0x78>
 8000510:	4b27      	ldr	r3, [pc, #156]	; (80005b0 <GPIO_PClockControl+0x108>)
 8000512:	695a      	ldr	r2, [r3, #20]
 8000514:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <GPIO_PClockControl+0x108>)
 8000516:	2180      	movs	r1, #128	; 0x80
 8000518:	0349      	lsls	r1, r1, #13
 800051a:	430a      	orrs	r2, r1
 800051c:	615a      	str	r2, [r3, #20]
}
 800051e:	e042      	b.n	80005a6 <GPIO_PClockControl+0xfe>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_EN();
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <GPIO_PClockControl+0x118>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d13e      	bne.n	80005a6 <GPIO_PClockControl+0xfe>
 8000528:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <GPIO_PClockControl+0x108>)
 800052a:	695a      	ldr	r2, [r3, #20]
 800052c:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <GPIO_PClockControl+0x108>)
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	03c9      	lsls	r1, r1, #15
 8000532:	430a      	orrs	r2, r1
 8000534:	615a      	str	r2, [r3, #20]
}
 8000536:	e036      	b.n	80005a6 <GPIO_PClockControl+0xfe>
		if 		(pGPIOx == GPIOA) GPIOA_PCLK_DI();
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	2390      	movs	r3, #144	; 0x90
 800053c:	05db      	lsls	r3, r3, #23
 800053e:	429a      	cmp	r2, r3
 8000540:	d106      	bne.n	8000550 <GPIO_PClockControl+0xa8>
 8000542:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <GPIO_PClockControl+0x108>)
 8000544:	695a      	ldr	r2, [r3, #20]
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <GPIO_PClockControl+0x108>)
 8000548:	491e      	ldr	r1, [pc, #120]	; (80005c4 <GPIO_PClockControl+0x11c>)
 800054a:	400a      	ands	r2, r1
 800054c:	615a      	str	r2, [r3, #20]
}
 800054e:	e02a      	b.n	80005a6 <GPIO_PClockControl+0xfe>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_DI();
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a18      	ldr	r2, [pc, #96]	; (80005b4 <GPIO_PClockControl+0x10c>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d106      	bne.n	8000566 <GPIO_PClockControl+0xbe>
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <GPIO_PClockControl+0x108>)
 800055a:	695a      	ldr	r2, [r3, #20]
 800055c:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <GPIO_PClockControl+0x108>)
 800055e:	491a      	ldr	r1, [pc, #104]	; (80005c8 <GPIO_PClockControl+0x120>)
 8000560:	400a      	ands	r2, r1
 8000562:	615a      	str	r2, [r3, #20]
}
 8000564:	e01f      	b.n	80005a6 <GPIO_PClockControl+0xfe>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_DI();
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4a13      	ldr	r2, [pc, #76]	; (80005b8 <GPIO_PClockControl+0x110>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d106      	bne.n	800057c <GPIO_PClockControl+0xd4>
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <GPIO_PClockControl+0x108>)
 8000570:	695a      	ldr	r2, [r3, #20]
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <GPIO_PClockControl+0x108>)
 8000574:	4915      	ldr	r1, [pc, #84]	; (80005cc <GPIO_PClockControl+0x124>)
 8000576:	400a      	ands	r2, r1
 8000578:	615a      	str	r2, [r3, #20]
}
 800057a:	e014      	b.n	80005a6 <GPIO_PClockControl+0xfe>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_DI();
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <GPIO_PClockControl+0x114>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d106      	bne.n	8000592 <GPIO_PClockControl+0xea>
 8000584:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <GPIO_PClockControl+0x108>)
 8000586:	695a      	ldr	r2, [r3, #20]
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <GPIO_PClockControl+0x108>)
 800058a:	4911      	ldr	r1, [pc, #68]	; (80005d0 <GPIO_PClockControl+0x128>)
 800058c:	400a      	ands	r2, r1
 800058e:	615a      	str	r2, [r3, #20]
}
 8000590:	e009      	b.n	80005a6 <GPIO_PClockControl+0xfe>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <GPIO_PClockControl+0x118>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d105      	bne.n	80005a6 <GPIO_PClockControl+0xfe>
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <GPIO_PClockControl+0x108>)
 800059c:	695a      	ldr	r2, [r3, #20]
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <GPIO_PClockControl+0x108>)
 80005a0:	490c      	ldr	r1, [pc, #48]	; (80005d4 <GPIO_PClockControl+0x12c>)
 80005a2:	400a      	ands	r2, r1
 80005a4:	615a      	str	r2, [r3, #20]
}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b002      	add	sp, #8
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	40021000 	.word	0x40021000
 80005b4:	48000400 	.word	0x48000400
 80005b8:	48000800 	.word	0x48000800
 80005bc:	48000c00 	.word	0x48000c00
 80005c0:	48001400 	.word	0x48001400
 80005c4:	fffdffff 	.word	0xfffdffff
 80005c8:	fffbffff 	.word	0xfffbffff
 80005cc:	fff7ffff 	.word	0xfff7ffff
 80005d0:	ffefffff 	.word	0xffefffff
 80005d4:	ffbfffff 	.word	0xffbfffff

080005d8 <GPIO_WriteToOutputPin>:
 * Input Parameters  : Base address of the GPIO peripheral; pin number of the GPIO port; Value to be written
 * Return Parameters : None
 * Note / Remarks	 : None
 ********************************************************************/
void GPIO_WriteToOutputPin (GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	0008      	movs	r0, r1
 80005e2:	0011      	movs	r1, r2
 80005e4:	1cfb      	adds	r3, r7, #3
 80005e6:	1c02      	adds	r2, r0, #0
 80005e8:	701a      	strb	r2, [r3, #0]
 80005ea:	1cbb      	adds	r3, r7, #2
 80005ec:	1c0a      	adds	r2, r1, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	if (Value == GPIO_PIN_SET)
 80005f0:	1cbb      	adds	r3, r7, #2
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d10a      	bne.n	800060e <GPIO_WriteToOutputPin+0x36>
	{
		pGPIOx ->ODR |= (1u << PinNumber);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	695a      	ldr	r2, [r3, #20]
 80005fc:	1cfb      	adds	r3, r7, #3
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2101      	movs	r1, #1
 8000602:	4099      	lsls	r1, r3
 8000604:	000b      	movs	r3, r1
 8000606:	431a      	orrs	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	615a      	str	r2, [r3, #20]
	}
	else
	{
		pGPIOx ->ODR &= ~(1u << PinNumber);
	}
}
 800060c:	e00a      	b.n	8000624 <GPIO_WriteToOutputPin+0x4c>
		pGPIOx ->ODR &= ~(1u << PinNumber);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	1cfa      	adds	r2, r7, #3
 8000614:	7812      	ldrb	r2, [r2, #0]
 8000616:	2101      	movs	r1, #1
 8000618:	4091      	lsls	r1, r2
 800061a:	000a      	movs	r2, r1
 800061c:	43d2      	mvns	r2, r2
 800061e:	401a      	ands	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	615a      	str	r2, [r3, #20]
}
 8000624:	46c0      	nop			; (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	b002      	add	sp, #8
 800062a:	bd80      	pop	{r7, pc}

0800062c <GPIO_ToggleOutputPin>:
 * Input Parameters  : Base address of the peripheral; Pin number of the pin to be toggled
 * Return Parameters : None
 * Note / Remarks	 : None
 ********************************************************************/
void GPIO_ToggleOutputPin (GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	000a      	movs	r2, r1
 8000636:	1cfb      	adds	r3, r7, #3
 8000638:	701a      	strb	r2, [r3, #0]
	pGPIOx->ODR = pGPIOx->ODR ^ (1u << PinNumber);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	695a      	ldr	r2, [r3, #20]
 800063e:	1cfb      	adds	r3, r7, #3
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2101      	movs	r1, #1
 8000644:	4099      	lsls	r1, r3
 8000646:	000b      	movs	r3, r1
 8000648:	405a      	eors	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	615a      	str	r2, [r3, #20]
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <GPIO_IRQConfig>:
 * Input Parameters  :
 * Return Parameters :
 * Note / Remarks	 :
 ********************************************************************/
void GPIO_IRQConfig (uint8_t IRQNumber, uint32_t IRQPriority, uint8_t EnOrDi)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6039      	str	r1, [r7, #0]
 8000660:	0011      	movs	r1, r2
 8000662:	1dfb      	adds	r3, r7, #7
 8000664:	1c02      	adds	r2, r0, #0
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	1dbb      	adds	r3, r7, #6
 800066a:	1c0a      	adds	r2, r1, #0
 800066c:	701a      	strb	r2, [r3, #0]
	if (EnOrDi == ENABLE)
 800066e:	1dbb      	adds	r3, r7, #6
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d109      	bne.n	800068a <GPIO_IRQConfig+0x32>
	{
		// Program ISER register to enable the interrupt
		(*NVIC_ISER) |= (1u << IRQNumber);
 8000676:	4b56      	ldr	r3, [pc, #344]	; (80007d0 <GPIO_IRQConfig+0x178>)
 8000678:	6819      	ldr	r1, [r3, #0]
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2201      	movs	r2, #1
 8000680:	409a      	lsls	r2, r3
 8000682:	4b53      	ldr	r3, [pc, #332]	; (80007d0 <GPIO_IRQConfig+0x178>)
 8000684:	430a      	orrs	r2, r1
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	e008      	b.n	800069c <GPIO_IRQConfig+0x44>
	}
	else
	{
		// Program ICER register to disable the interrupt
		(*NVIC_ICER) |= (1u << IRQNumber);
 800068a:	4b52      	ldr	r3, [pc, #328]	; (80007d4 <GPIO_IRQConfig+0x17c>)
 800068c:	6819      	ldr	r1, [r3, #0]
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2201      	movs	r2, #1
 8000694:	409a      	lsls	r2, r3
 8000696:	4b4f      	ldr	r3, [pc, #316]	; (80007d4 <GPIO_IRQConfig+0x17c>)
 8000698:	430a      	orrs	r2, r1
 800069a:	601a      	str	r2, [r3, #0]
	}

	// Code to set the interrupt priority - lower the value higher the priority of the interrupt
	uint8_t temp = IRQNumber % 4;
 800069c:	200f      	movs	r0, #15
 800069e:	183b      	adds	r3, r7, r0
 80006a0:	1dfa      	adds	r2, r7, #7
 80006a2:	7812      	ldrb	r2, [r2, #0]
 80006a4:	2103      	movs	r1, #3
 80006a6:	400a      	ands	r2, r1
 80006a8:	701a      	strb	r2, [r3, #0]

	if (IRQNumber <= 3)
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d80c      	bhi.n	80006cc <GPIO_IRQConfig+0x74>
	{
		// Left shifting by 6 is required as Cortex M0 reads only bits [7:6] and ignores the bits [5:0]
		(*NVIC_IPR0) |= ((IRQPriority) << (8 * temp)) << 6;
 80006b2:	4b49      	ldr	r3, [pc, #292]	; (80007d8 <GPIO_IRQConfig+0x180>)
 80006b4:	6819      	ldr	r1, [r3, #0]
 80006b6:	183b      	adds	r3, r7, r0
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	00db      	lsls	r3, r3, #3
 80006bc:	683a      	ldr	r2, [r7, #0]
 80006be:	409a      	lsls	r2, r3
 80006c0:	0013      	movs	r3, r2
 80006c2:	019a      	lsls	r2, r3, #6
 80006c4:	4b44      	ldr	r3, [pc, #272]	; (80007d8 <GPIO_IRQConfig+0x180>)
 80006c6:	430a      	orrs	r2, r1
 80006c8:	601a      	str	r2, [r3, #0]
	else if (IRQNumber <= 31)
	{
		(*NVIC_IPR7) |= ((IRQPriority) << (8 * temp)) << 6;
	}
	else {} // do nothing
}
 80006ca:	e07c      	b.n	80007c6 <GPIO_IRQConfig+0x16e>
	else if (IRQNumber <= 7)
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b07      	cmp	r3, #7
 80006d2:	d80d      	bhi.n	80006f0 <GPIO_IRQConfig+0x98>
		(*NVIC_IPR1) |= ((IRQPriority) << (8 * temp)) << 6;
 80006d4:	4b41      	ldr	r3, [pc, #260]	; (80007dc <GPIO_IRQConfig+0x184>)
 80006d6:	6819      	ldr	r1, [r3, #0]
 80006d8:	230f      	movs	r3, #15
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	683a      	ldr	r2, [r7, #0]
 80006e2:	409a      	lsls	r2, r3
 80006e4:	0013      	movs	r3, r2
 80006e6:	019a      	lsls	r2, r3, #6
 80006e8:	4b3c      	ldr	r3, [pc, #240]	; (80007dc <GPIO_IRQConfig+0x184>)
 80006ea:	430a      	orrs	r2, r1
 80006ec:	601a      	str	r2, [r3, #0]
}
 80006ee:	e06a      	b.n	80007c6 <GPIO_IRQConfig+0x16e>
	else if (IRQNumber <= 11)
 80006f0:	1dfb      	adds	r3, r7, #7
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b0b      	cmp	r3, #11
 80006f6:	d80d      	bhi.n	8000714 <GPIO_IRQConfig+0xbc>
		(*NVIC_IPR2) |= ((IRQPriority) << (8 * temp)) << 6;
 80006f8:	4b39      	ldr	r3, [pc, #228]	; (80007e0 <GPIO_IRQConfig+0x188>)
 80006fa:	6819      	ldr	r1, [r3, #0]
 80006fc:	230f      	movs	r3, #15
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	683a      	ldr	r2, [r7, #0]
 8000706:	409a      	lsls	r2, r3
 8000708:	0013      	movs	r3, r2
 800070a:	019a      	lsls	r2, r3, #6
 800070c:	4b34      	ldr	r3, [pc, #208]	; (80007e0 <GPIO_IRQConfig+0x188>)
 800070e:	430a      	orrs	r2, r1
 8000710:	601a      	str	r2, [r3, #0]
}
 8000712:	e058      	b.n	80007c6 <GPIO_IRQConfig+0x16e>
	else if (IRQNumber <= 15)
 8000714:	1dfb      	adds	r3, r7, #7
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b0f      	cmp	r3, #15
 800071a:	d80d      	bhi.n	8000738 <GPIO_IRQConfig+0xe0>
		(*NVIC_IPR3) |= ((IRQPriority) << (8 * temp)) << 6;
 800071c:	4b31      	ldr	r3, [pc, #196]	; (80007e4 <GPIO_IRQConfig+0x18c>)
 800071e:	6819      	ldr	r1, [r3, #0]
 8000720:	230f      	movs	r3, #15
 8000722:	18fb      	adds	r3, r7, r3
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	409a      	lsls	r2, r3
 800072c:	0013      	movs	r3, r2
 800072e:	019a      	lsls	r2, r3, #6
 8000730:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <GPIO_IRQConfig+0x18c>)
 8000732:	430a      	orrs	r2, r1
 8000734:	601a      	str	r2, [r3, #0]
}
 8000736:	e046      	b.n	80007c6 <GPIO_IRQConfig+0x16e>
	else if (IRQNumber <= 19)
 8000738:	1dfb      	adds	r3, r7, #7
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b13      	cmp	r3, #19
 800073e:	d80d      	bhi.n	800075c <GPIO_IRQConfig+0x104>
		(*NVIC_IPR4) |= ((IRQPriority) << (8 * temp)) << 6;
 8000740:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <GPIO_IRQConfig+0x190>)
 8000742:	6819      	ldr	r1, [r3, #0]
 8000744:	230f      	movs	r3, #15
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	683a      	ldr	r2, [r7, #0]
 800074e:	409a      	lsls	r2, r3
 8000750:	0013      	movs	r3, r2
 8000752:	019a      	lsls	r2, r3, #6
 8000754:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <GPIO_IRQConfig+0x190>)
 8000756:	430a      	orrs	r2, r1
 8000758:	601a      	str	r2, [r3, #0]
}
 800075a:	e034      	b.n	80007c6 <GPIO_IRQConfig+0x16e>
	else if (IRQNumber <= 23)
 800075c:	1dfb      	adds	r3, r7, #7
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b17      	cmp	r3, #23
 8000762:	d80d      	bhi.n	8000780 <GPIO_IRQConfig+0x128>
		(*NVIC_IPR5) |= ((IRQPriority) << (8 * temp)) << 6;
 8000764:	4b21      	ldr	r3, [pc, #132]	; (80007ec <GPIO_IRQConfig+0x194>)
 8000766:	6819      	ldr	r1, [r3, #0]
 8000768:	230f      	movs	r3, #15
 800076a:	18fb      	adds	r3, r7, r3
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	409a      	lsls	r2, r3
 8000774:	0013      	movs	r3, r2
 8000776:	019a      	lsls	r2, r3, #6
 8000778:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <GPIO_IRQConfig+0x194>)
 800077a:	430a      	orrs	r2, r1
 800077c:	601a      	str	r2, [r3, #0]
}
 800077e:	e022      	b.n	80007c6 <GPIO_IRQConfig+0x16e>
	else if (IRQNumber <= 27)
 8000780:	1dfb      	adds	r3, r7, #7
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b1b      	cmp	r3, #27
 8000786:	d80d      	bhi.n	80007a4 <GPIO_IRQConfig+0x14c>
		(*NVIC_IPR6) |= ((IRQPriority) << (8 * temp)) << 6;
 8000788:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <GPIO_IRQConfig+0x198>)
 800078a:	6819      	ldr	r1, [r3, #0]
 800078c:	230f      	movs	r3, #15
 800078e:	18fb      	adds	r3, r7, r3
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	683a      	ldr	r2, [r7, #0]
 8000796:	409a      	lsls	r2, r3
 8000798:	0013      	movs	r3, r2
 800079a:	019a      	lsls	r2, r3, #6
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <GPIO_IRQConfig+0x198>)
 800079e:	430a      	orrs	r2, r1
 80007a0:	601a      	str	r2, [r3, #0]
}
 80007a2:	e010      	b.n	80007c6 <GPIO_IRQConfig+0x16e>
	else if (IRQNumber <= 31)
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b1f      	cmp	r3, #31
 80007aa:	d80c      	bhi.n	80007c6 <GPIO_IRQConfig+0x16e>
		(*NVIC_IPR7) |= ((IRQPriority) << (8 * temp)) << 6;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <GPIO_IRQConfig+0x19c>)
 80007ae:	6819      	ldr	r1, [r3, #0]
 80007b0:	230f      	movs	r3, #15
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	409a      	lsls	r2, r3
 80007bc:	0013      	movs	r3, r2
 80007be:	019a      	lsls	r2, r3, #6
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <GPIO_IRQConfig+0x19c>)
 80007c2:	430a      	orrs	r2, r1
 80007c4:	601a      	str	r2, [r3, #0]
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b004      	add	sp, #16
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	e000e100 	.word	0xe000e100
 80007d4:	e000e180 	.word	0xe000e180
 80007d8:	e000e400 	.word	0xe000e400
 80007dc:	e000e404 	.word	0xe000e404
 80007e0:	e000e408 	.word	0xe000e408
 80007e4:	e000e40c 	.word	0xe000e40c
 80007e8:	e000e410 	.word	0xe000e410
 80007ec:	e000e414 	.word	0xe000e414
 80007f0:	e000e418 	.word	0xe000e418
 80007f4:	e000e41c 	.word	0xe000e41c

080007f8 <GPIO_IRQHandling>:
 * Input Parameters  :
 * Return Parameters :
 * Note / Remarks	 :
 ********************************************************************/
void GPIO_IRQHandling (uint8_t PinNumber)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	0002      	movs	r2, r0
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	701a      	strb	r2, [r3, #0]
	if (EXTI->EXTI_PR & (1 << PinNumber))
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <GPIO_IRQHandling+0x38>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	1dfa      	adds	r2, r7, #7
 800080a:	7812      	ldrb	r2, [r2, #0]
 800080c:	2101      	movs	r1, #1
 800080e:	4091      	lsls	r1, r2
 8000810:	000a      	movs	r2, r1
 8000812:	4013      	ands	r3, r2
 8000814:	d008      	beq.n	8000828 <GPIO_IRQHandling+0x30>
	{
		// Clear the pending IRQ
		EXTI ->EXTI_PR |= (1u << PinNumber);
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <GPIO_IRQHandling+0x38>)
 8000818:	6959      	ldr	r1, [r3, #20]
 800081a:	1dfb      	adds	r3, r7, #7
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2201      	movs	r2, #1
 8000820:	409a      	lsls	r2, r3
 8000822:	4b03      	ldr	r3, [pc, #12]	; (8000830 <GPIO_IRQHandling+0x38>)
 8000824:	430a      	orrs	r2, r1
 8000826:	615a      	str	r2, [r3, #20]
	}
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b002      	add	sp, #8
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40010400 	.word	0x40010400

08000834 <memset>:
 8000834:	0003      	movs	r3, r0
 8000836:	1882      	adds	r2, r0, r2
 8000838:	4293      	cmp	r3, r2
 800083a:	d100      	bne.n	800083e <memset+0xa>
 800083c:	4770      	bx	lr
 800083e:	7019      	strb	r1, [r3, #0]
 8000840:	3301      	adds	r3, #1
 8000842:	e7f9      	b.n	8000838 <memset+0x4>

08000844 <__libc_init_array>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	2600      	movs	r6, #0
 8000848:	4c0c      	ldr	r4, [pc, #48]	; (800087c <__libc_init_array+0x38>)
 800084a:	4d0d      	ldr	r5, [pc, #52]	; (8000880 <__libc_init_array+0x3c>)
 800084c:	1b64      	subs	r4, r4, r5
 800084e:	10a4      	asrs	r4, r4, #2
 8000850:	42a6      	cmp	r6, r4
 8000852:	d109      	bne.n	8000868 <__libc_init_array+0x24>
 8000854:	2600      	movs	r6, #0
 8000856:	f000 f819 	bl	800088c <_init>
 800085a:	4c0a      	ldr	r4, [pc, #40]	; (8000884 <__libc_init_array+0x40>)
 800085c:	4d0a      	ldr	r5, [pc, #40]	; (8000888 <__libc_init_array+0x44>)
 800085e:	1b64      	subs	r4, r4, r5
 8000860:	10a4      	asrs	r4, r4, #2
 8000862:	42a6      	cmp	r6, r4
 8000864:	d105      	bne.n	8000872 <__libc_init_array+0x2e>
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	00b3      	lsls	r3, r6, #2
 800086a:	58eb      	ldr	r3, [r5, r3]
 800086c:	4798      	blx	r3
 800086e:	3601      	adds	r6, #1
 8000870:	e7ee      	b.n	8000850 <__libc_init_array+0xc>
 8000872:	00b3      	lsls	r3, r6, #2
 8000874:	58eb      	ldr	r3, [r5, r3]
 8000876:	4798      	blx	r3
 8000878:	3601      	adds	r6, #1
 800087a:	e7f2      	b.n	8000862 <__libc_init_array+0x1e>
 800087c:	080008a4 	.word	0x080008a4
 8000880:	080008a4 	.word	0x080008a4
 8000884:	080008a8 	.word	0x080008a8
 8000888:	080008a4 	.word	0x080008a4

0800088c <_init>:
 800088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000892:	bc08      	pop	{r3}
 8000894:	469e      	mov	lr, r3
 8000896:	4770      	bx	lr

08000898 <_fini>:
 8000898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800089e:	bc08      	pop	{r3}
 80008a0:	469e      	mov	lr, r3
 80008a2:	4770      	bx	lr
